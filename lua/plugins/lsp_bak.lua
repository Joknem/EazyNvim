return {}
-- return {
--   {
--     'neovim/nvim-lspconfig',
--     ft = vim.g.fts,
--     dependencies = {
--       'folke/neodev.nvim',
--       'nvimdev/lspsaga.nvim',
--     },
--     config = function()
--       local servers = {
--         clangd = {
--             cmd = {
--                 "clangd"
--             },
--             filetypes = {"c", "cpp"}
--         },
--         pyright = {},
--       }
--       local on_attach = function(_, bufnr)
--         local nmap = function(keys, func, desc)
--           if desc then
--             desc = 'LSP: ' .. desc
--           end
--           vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
--         end
--         nmap("gd", vim.lsp.buf.definition, "Open definition")
--         nmap("<leader>mm", "<cmd>Lspsaga term_toggle<CR>", "Open terminal")
--         nmap('gpd', '<cmd>Lspsaga peek_definition<CR>', 'Peek Definition')
--         nmap('gpr', '<cmd>Telescope lsp_references<CR>', 'Peek References')
--         nmap('K', '<cmd>Lspsaga hover_doc<CR>', 'Hover Documentation')
--         nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, 'Workspace Add Folder')
--         nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, 'Workspace Remove Folder')
--         nmap('<leader>wl', function()
--           vim.notify(vim.inspect(vim.lsp.buf.list_workspace_folders()))
--         end, 'Workspace List Folders')
--         nmap('<leader>rn', '<cmd>Lspsaga rename ++project<cr>', 'Rename')
--         nmap('<leader>ca', '<cmd>Lspsaga code_action<CR>', 'Code Action')
--         nmap('<leader>ot', '<cmd>Lspsaga outline<CR>', 'OutLine')
--         nmap('d[', vim.diagnostic.goto_prev, 'Diangostics Prev')
--         nmap('d]', vim.diagnostic.goto_next, 'Diangostics Next')
--       end
--
--       local capabilities = require('cmp_nvim_lsp').default_capabilities()
--
--       require('neodev').setup({
--         lspconfig = true,
--         override = function(_, library)
--           library.enabled = true
--           library.plugins = true
--           library.types = true
--         end,
--       })
--
--       require('lspsaga').setup({
--         outline = {
--           keys = {
--             quit = 'Q',
--           }
--         },
--         finder = {
--           keys = {
--             quit = 'Q',
--             edit = '<C-o>',
--             toggle_or_open = '<CR>',
--           },
--         },
--         definition = {
--           keys = {
--             edit = '<C-o>',
--             vsplit = '<c-v>',
--           }
--         },
--         code_action = {
--           keys = {
--             quit = 'Q',
--           }
--         },
--         hover_doc = {
--           keys = 'K',
--         },
--       })
--
--       for server, config in pairs(servers) do
--         require('lspconfig')[server].setup(vim.tbl_deep_extend('keep', {
--           on_attach = on_attach,
--           capabilities = capabilities,
--         }, config))
--       end
--
--       vim.diagnostic.config({
--         virtual_text = {
--           prefix = '‚ùØ',
--         }
--       })
--
--       vim.api.nvim_create_autocmd('CursorHold', {
--         callback = function()
--           local opts = {
--             focusable = false,
--             close_events = { 'BufLeave', 'CursorMoved', 'InsertEnter', 'FocusLost' },
--             border = 'rounded',
--             source = 'always',
--             prefix = ' ',
--             scope = 'cursor',
--           }
--           vim.diagnostic.open_float(nil, opts)
--         end
--       })
--     end,
--   },
--   {
--     'hrsh7th/nvim-cmp',
--     lazy = true,
--     event = 'LspAttach',
--     dependencies = {
--       'hrsh7th/cmp-nvim-lsp',
--       {
--         'saadparwaiz1/cmp_luasnip',
--         dependencies = {
--           'L3MON4D3/LuaSnip',
--         },
--       },
--       'hrsh7th/cmp-nvim-lua',
--       'hrsh7th/cmp-buffer',
--       'hrsh7th/cmp-path',
--       'onsails/lspkind.nvim',
--       "zbirenbaum/copilot.lua",
--       "zbirenbaum/copilot-cmp",
--     },
--     config = function()
--       local has_words_before = function()
--         unpack = unpack or table.unpack
--         local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--         return col ~= 0
--             and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match('%s') == nil
--       end
--       require('luasnip.loaders.from_snipmate').lazy_load()
--       local luasnip = require('luasnip')
--       local cmp = require('cmp')
--       cmp.setup({
--         window = {
--           completion = {
--             winhighlight = 'normal:pmenu,floatborder:pmenu,search:none',
--             col_offset = -3,
--             side_padding = 0,
--             border = 'rounded',
--             scrollbar = true,
--           },
--           documentation = {
--             winhighlight = 'normal:pmenu,floatborder:pmenu,search:none',
--             border = 'rounded',
--             scrollbar = true,
--           },
--         },
--         formatting = {
--           fields = { 'kind', 'abbr', 'menu' },
--           format = function(entry, vim_item)
--             local kind = require('lspkind').cmp_format({ mode = 'symbol_text', maxwidth = 50 })(entry, vim_item)
--             local strings = vim.split(kind.kind, '%s', { trimempty = true })
--             kind.kind = ' ' .. (strings[1] or '') .. ' '
--             kind.menu = ' ' .. (strings[2] or '')
--             return kind
--           end,
--         },
--         snippet = {
--           expand = function(args)
--             require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
--           end,
--         },
--         sources = cmp.config.sources({
--           { name = 'copilot',  priority = 100 },
--           { name = 'nvim_lsp', priority = 100 },
--           { name = 'nvim_lua', priority = 100 },
--           { name = 'path',     priority = 100 },
--           { name = 'buffer',   priority = 100 },
--         }),
--         mapping = cmp.mapping.preset.insert({
--           ['<Tab>'] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--               cmp.select_next_item()
--             elseif luasnip.expand_or_jumpable() then
--                 luasnip.expand_or_jumpable()
--             elseif has_words_before() then
--               cmp.complete()
--             else
--               fallback()
--             end
--           end, { 'i', 's' }),
--           ['<S-Tab>'] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--               cmp.select_prev_item()
--             elseif luasnip.jumpable(-1) then
--               luasnip.jump(-1)
--             else
--               fallback()
--             end
--           end, { 'i', 's' }),
--           ['<CR>'] = cmp.mapping.confirm({ select = true }),
--           ['C-e'] = cmp.mapping.close()
--         }),
--         experimental = {
--           ghost_text = true,
--         },
--       })
--     end,
--   },
--   {
--     "ray-x/lsp_signature.nvim",
--     event = "VeryLazy",
--     opts = {},
--     config = function(_, opts)
--         local cfg = {
--             debug = false,
--             log_path = vim.fn.stdpath("cache") .. "/lsp_signature.log",
--             verbose = false,
--             bind = true,
--             doc_lines = 10,
--             max_height = 12,
--             max_width = 80,
--             wrap = true,
--             floating_window = true,
--             floating_window_above_cur_line = true,
--             floating_window_off_x = 1,
--             floating_window_off_y = function()
--                 local linear = vim.api.nvim_win_get_cursor(0)[1]
--                 local pumheight = vim.o.pumheight
--                 local winline = vim.fn.winline()
--                 local winheight = vim.fn.winheight(0)
--                 if winline - 1 < pumheight then
--                     return pumheight
--                 end
--                 if winheight - 1 < pumheight then
--                     return -pumheight
--                 end
--                 return 0
--             end,
--             close_timeout = 200,
--             fix_pos = false,
--             hint_endable = true,
--             hint_prefix = "üêº ",
--             hint_scheme = "String",
--             hint_inline = function() return false end, -- should the hint be inline(nvim 0.10 only)?  default false
--             hi_parameter = "LspSignatureActiveParameter",
--             handler_opts = {
--                 border = "rounded",
--             },
--             always_trigger = false,
--             auto_close_after = nil,
--             extra_trigger_chars = {},
--             zindex = 200,
--             padding = '',
--             transparency = nil,
--             shadow_blend = 36,
--             shadow_guigb = 'Black',
--             timer_interval = 10,
--             toggle_key = nil,
--             toggle_key_flip_floatwin_setting = false,
--             select_signature_key = nil,
--             move_cursor_key = nil,
--         }
--         require('lsp_signature').setup(cfg)
--     end
--   },
-- }
